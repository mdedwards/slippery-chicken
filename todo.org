# -*- eval: (flyspell-mode); eval: (ispell-change-dictionary "en") -*-
#+CATEGORY: sc
#+title: envelopes (feature)
#+LANGUAGE: en
#+startup: overview

* Overview

Implementation notes and todos for the development of (automation) envelope
classes and related methods.

Leon Focker, Ruben Philipp -- october 2024

* Classes

** ~sclist->envelope~ 

*** slots
**** original Envelope
- irgendeine Liste (x-y paare)
**** y-min y-max x-min x-max
numbers
**** normalized envelope
- y: 0 - 1, x: 0 - 100
**** sample-rate?
- sample rate for points e.g. converted via polar->cartesian
  - might be better located in a specialized class or the conversion-method (RP
    Wed Oct 16 21:49:16 2024) 
**** destination
- either here, or in a child-class
- when item-envelopes are bundled to a track-envelope, it is necessary to know
  what they are actually automating

*** methods
**** make-envelope
#+begin_src lisp
(defun make-envelope (env-list &key (y-min 0) (y-max 1) (x-min 0) (x-max 100)))  
#+end_src
**** all env-related utilities as methods
- need to redesign a bunch of "old" functions as methods
**** NEXT decimate-envelope

- state: implemented by RP (~douglas-peucker~ function in utilities.lsp)
***** TODO add method to ~decimate-env~
- heuristically determine the epsilon from the ~num-points~ argument

*** usage

- either track-based -> conversion to reaper-envelope,
- or item-based -> bind to an item

** ~envelope->reaper-envelope~

*** slots
- all existing slots
- ...



